
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import newpackage.Beszállító;
import newpackage.Cimzett;
import newpackage.DbKapcsolat;
import newpackage.PdfGenerator;
import newpackage.Termék;
import newpackage.Vevő;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author kicsi
 */
public class Dokumentum extends javax.swing.JDialog {

    // Font fFont;
    //private final String fejlec = ("\n\n                                                                   Árajánlat     \n\n\n\n"
    //         + " ________________________________________________________________________________________\n"
    ////         + "  Ajánlat kiállító adatai:"
    //         + "\t\t\t\tAjánlatkérő adatai:\n"
    //         + " ________________________________________________________________________________________\n");
    // private final String lablec = ("________________________________________________________________________________________\n\n\n\t\t\t\t\tÖsszesen:\t");
    private DbKapcsolat db;
    private Vevő vevo = null;
    // private ArrayList<String> dokumentumFejlec;
    // private ArrayList<String> dokumentumRendeles;
    private Vector<Termék> rendeltTermekek;
    private Vector<Beszállító> beszallitok;
    private String vevoAdatok = "";
    // private float osszesen = 0;
    private String filenev = "";
    private Cimzett cimzett;
    private Termék termek = null;
    private String dokumentumCime = "";

    public Dokumentum(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        vevoKivalaszt.setVisible(false);
        this.setBounds(150, 0, 1100, 735);
        this.setTitle("Megrendelés");
        radioButtonCsoport.add(arajanlatRadioButton);
        radioButtonCsoport.add(megrendelesRadioButton);
        arajanlatRadioButton.setSelected(true);
        rendeltTermekek = new Vector<>();
        beszallitok = new Vector<>();
        cimzett = new Cimzett("", "", "", "");
        table.setModel(new ExampleTableModel(rendeltTermekek));
        table.setFillsViewportHeight(true);

        table.getColumn("action").setCellRenderer(new ButtonCellRenderer());
        table.getColumn("action").setCellEditor(new ButtonCellEditor(rendeltTermekek));

        //  dokumentumFejlec = new ArrayList<>();
        //  dokumentumRendeles = new ArrayList<>();
        // dokumentumFejlec.add(fejlec);
        db = frame.getDbKapcsolat();
        vasarloLista.setModel(new DefaultComboBoxModel(db.getVevok()));
        termekLista.setModel(new DefaultComboBoxModel(db.getTermekek()));
//        Beszállító besz=db.getBeszallitok().get(0);
//        System.out.println(besz);
        beszallitoLista.setModel(new DefaultComboBoxModel(db.getBeszallitok()));

        //  fFont = new Font("Dialog", Font.PLAIN, 12);
        //  textArea.setFont(fFont);
        //  textArea.setText(dokumentumFejlec.get(0));
        AutoCompleteDecorator.decorate(vasarloLista);
        AutoCompleteDecorator.decorate(termekLista);

        JTableHeader header = table.getTableHeader(); //[255,140,0]
        header.setBackground(Color.getHSBColor((float) 0.46785712, (float) 1.0, (float) 0.54901963));
        header.setForeground(Color.WHITE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonCsoport = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        vasarloLista = new javax.swing.JComboBox();
        termekLista = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        vevoKivalaszt = new javax.swing.JButton();
        termekHozzaad = new javax.swing.JButton();
        rendeltMennyiseg = new javax.swing.JTextField();
        keszGomb = new javax.swing.JButton();
        vasarloAdatrogzitGomb = new javax.swing.JButton();
        arajanlatRadioButton = new javax.swing.JRadioButton();
        megrendelesRadioButton = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        beszallitoLista = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nev = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cim = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        telefonszam = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        email = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(238, 238, 238));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        vasarloLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vasarloListaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 140, 113));
        jLabel1.setText("Vásárló:");

        vevoKivalaszt.setBackground(new java.awt.Color(255, 140, 0));
        vevoKivalaszt.setForeground(new java.awt.Color(255, 255, 255));
        vevoKivalaszt.setText("KIVÁLASZT");
        vevoKivalaszt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vevoKivalasztActionPerformed(evt);
            }
        });

        termekHozzaad.setBackground(new java.awt.Color(255, 140, 0));
        termekHozzaad.setForeground(new java.awt.Color(255, 255, 255));
        termekHozzaad.setText("HOZZÁAD");
        termekHozzaad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termekHozzaadActionPerformed(evt);
            }
        });

        keszGomb.setBackground(new java.awt.Color(255, 140, 0));
        keszGomb.setForeground(new java.awt.Color(255, 255, 255));
        keszGomb.setText("MENTÉS");
        keszGomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keszGombActionPerformed(evt);
            }
        });

        vasarloAdatrogzitGomb.setBackground(new java.awt.Color(255, 140, 0));
        vasarloAdatrogzitGomb.setForeground(new java.awt.Color(255, 255, 255));
        vasarloAdatrogzitGomb.setText("Új vásárló adatok rögzítése");
        vasarloAdatrogzitGomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vasarloAdatrogzitGombActionPerformed(evt);
            }
        });

        arajanlatRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        arajanlatRadioButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        arajanlatRadioButton.setForeground(new java.awt.Color(0, 140, 113));
        arajanlatRadioButton.setText("Árajánlat");

        megrendelesRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        megrendelesRadioButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        megrendelesRadioButton.setForeground(new java.awt.Color(0, 140, 113));
        megrendelesRadioButton.setText("Megrendelés");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 140, 113));
        jLabel7.setText("Termék kiválasztása:");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 140, 113));
        jLabel8.setText("Mennyiség:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 140, 113));
        jLabel6.setText("Címzett kiválasztása:");

        beszallitoLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beszallitoListaActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 140, 113));
        jLabel9.setText("Beszállító:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rendeltMennyiseg)
                    .addComponent(termekLista, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vasarloLista, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(arajanlatRadioButton)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 267, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keszGomb, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(termekHozzaad, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(megrendelesRadioButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(vasarloAdatrogzitGomb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vevoKivalaszt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(beszallitoLista, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(beszallitoLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vasarloLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vevoKivalaszt)
                    .addComponent(vasarloAdatrogzitGomb))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arajanlatRadioButton)
                    .addComponent(megrendelesRadioButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(termekLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rendeltMennyiseg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(termekHozzaad, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(keszGomb)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(20);
            table.getColumnModel().getColumn(0).setPreferredWidth(20);
            table.getColumnModel().getColumn(1).setMinWidth(250);
            table.getColumnModel().getColumn(1).setPreferredWidth(250);
            table.getColumnModel().getColumn(2).setPreferredWidth(10);
            table.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 140, 113));
        jLabel2.setText("Név:");

        nev.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 140, 113));
        jLabel3.setText("Cím:");

        cim.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 140, 113));
        jLabel4.setText("Telefonszám:");

        telefonszam.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 140, 113));
        jLabel5.setText("E-mail cím:");

        email.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(telefonszam, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nev, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cim, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nev, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(cim, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(telefonszam, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vevoKivalasztActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vevoKivalasztActionPerformed

        // textArea.setText("");
        vevo = (Vevő) vasarloLista.getSelectedItem();

        filenev = vevo.getVezetekNev() + " " + vevo.getKeresztNev();

        nev.setText(vevo.getVezetekNev() + " " + vevo.getKeresztNev());
        cim.setText(vevo.getVevoCim());
        telefonszam.setText(vevo.getVevoTelefonSzam());
        email.setText(vevo.getVevoEmailCim());
        cimzett.setNev(vevo.getVezetekNev() + " " + vevo.getKeresztNev());
        cimzett.setCim(vevo.getVevoCim());
        cimzett.setEmail(vevo.getVevoEmailCim());
        cimzett.setCim(vevo.getVevoCim());

        arajanlatRadioButton.setEnabled(true);
        megrendelesRadioButton.setEnabled(true);

        dokumentumCime = "Árajánlat";

        /*  vevoAdatok = "  Kitalált Proba Kft.\t\t\t\t" + vevo.getVezetekNev() + " " + vevo.getKeresztNev()
         + "\n  1204 Budapest\t\t\t\t" + vevo.getVevoCim()
         + "\n  Sárrét utca 8/a\t\t\t\t\t" + "Telefonszám: " + vevo.getVevoTelefonSzam()
         + "\n  Adószám: 22255841\t\t\t\t" + "E-mail: " + vevo.getVevoEmailCim()
         + "\n  Telefonszám: +36 20 555 88 77"
         + "\n  E-mail: kitalaltprobakft@gmail.com\n"
         + "________________________________________________________________________________________\n"
         + "  Cikkszám\tMegnevezés\tMennyiség\t\tNettó Ár\tBrutto ár\n"
         + "________________________________________________________________________________________\n";

         dokumentumFejlec.clear();
         dokumentumFejlec.add(fejlec);
         dokumentumFejlec.add(vevoAdatok);
         cimzett = vevoAdatok;

         for (int i = 0; i < dokumentumFejlec.size(); i++) {
         textArea.append(dokumentumFejlec.get(i));

         }
         for (int i = 0; i < dokumentumRendeles.size(); i++) {
         textArea.append(dokumentumRendeles.get(i));

         }

         textArea.append(lablec + osszesen);*/
    }//GEN-LAST:event_vevoKivalasztActionPerformed

    private void termekHozzaadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termekHozzaadActionPerformed

        if (!rendeltMennyiseg.getText().equals("")) {

            termek = (Termék) termekLista.getSelectedItem();

            if (!rendeltTermekek.contains(termek)) {
                // String megnevezes = termek.getMegnevezes();
                // String cikkszam = termek.getCikkszam();
                // int nettoar = termek.getAr();
                // float bruttoar = (float) (1.27 * nettoar);
                //  String nettoAr = String.valueOf(nettoar);
                //  String bruttoAr = String.valueOf(bruttoar);
                int darab = Integer.parseInt(rendeltMennyiseg.getText());
                termek.setRendeltMennyiseg(darab);
                //  String rendeles = "  " + cikkszam + "\t" + megnevezes + "\t" + darab + "\t\t" + nettoAr + "\t" + bruttoAr + "\n";
                //  dokumentumRendeles.add(rendeles);
                rendeltTermekek.add(termek);
                //  osszesen = osszesen + (bruttoar * darab);
            }

            //textArea.setText("");

            /*   for (int i = 0; i < dokumentumFejlec.size(); i++) {
             textArea.append(dokumentumFejlec.get(i));

             }
             for (int i = 0; i < dokumentumRendeles.size(); i++) {
             textArea.append(dokumentumRendeles.get(i));

             }
             textArea.append(lablec + osszesen + "Ft");*/
        }
        table.setModel(new ExampleTableModel(rendeltTermekek));
        table.getColumn("action").setCellRenderer(new ButtonCellRenderer());
        table.getColumn("action").setCellEditor(new ButtonCellEditor(rendeltTermekek));
        // table.getColumn("rendelt mennyiség").setCellEditor(new MennyisegCellEditor(rendeltTermekek));
        // table.setEnabled(true);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
    }//GEN-LAST:event_termekHozzaadActionPerformed

    public Vector<Termék> getRendeltTermekek() {
        return rendeltTermekek;
    }

    public void setRendeltTermekek(Vector<Termék> rendeltTermekek) {
        this.rendeltTermekek = rendeltTermekek;
    }


    private void keszGombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keszGombActionPerformed
        if (!email.getText().isEmpty()) {
            if (rendeltTermekek.size() != 0) {
                for (int i = 0; i < rendeltTermekek.size(); i++) {
                    Termék termek = rendeltTermekek.get(i);
                    int rendeltMennyiseg = termek.getRendeltMennyiseg();
                    String modositottMennyiseg = table.getValueAt(i, 2).toString();
                    if (rendeltMennyiseg != Integer.valueOf(modositottMennyiseg)) {

                        termek.setRendeltMennyiseg(Integer.valueOf(modositottMennyiseg));

                        System.out.println(rendeltMennyiseg);
                        System.out.println(table.getValueAt(i, 2));
                    }
                }
                if (megrendelesRadioButton.isSelected()) {

                    try {
                        db.ujMegrendeles(vevo, rendeltTermekek);
                        JOptionPane.showMessageDialog(null, "Megrendelés rögzítve");
                        dokumentumCime = "Megrendelés";
                    } catch (SQLException ex) {
                        Logger.getLogger(Dokumentum.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

                PdfGenerator g = new PdfGenerator(filenev, cimzett, rendeltTermekek, dokumentumCime);

                EmailDialog email = new EmailDialog((Frame) this.getParent(), true, cimzett, g);
                if (!g.getFilePath().isEmpty()) {

                    email.setVisible(true);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Adja meg a címzettet");
        }
    }//GEN-LAST:event_keszGombActionPerformed

    private void vasarloAdatrogzitGombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vasarloAdatrogzitGombActionPerformed
        VevoHozzaad vevoHozzaadPanel = new VevoHozzaad();
        VevoAdatModositas modosit = new VevoAdatModositas((Frame) this.getParent(), true, vevoHozzaadPanel);
        modosit.setVisible(true);
        vasarloLista.setModel(new DefaultComboBoxModel(db.getVevok()));
    }//GEN-LAST:event_vasarloAdatrogzitGombActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//        vasarloLista.setModel(new DefaultComboBoxModel(db.getVevok()));
//        vevoKivalaszt.doClick();
    }//GEN-LAST:event_formWindowActivated

    private void vasarloListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vasarloListaActionPerformed
//        vevoKivalaszt.doClick();
        vevo = (Vevő) vasarloLista.getSelectedItem();

        filenev = vevo.getVezetekNev() + " " + vevo.getKeresztNev();

        nev.setText(vevo.getVezetekNev() + " " + vevo.getKeresztNev());
        cim.setText(vevo.getVevoCim());
        telefonszam.setText(vevo.getVevoTelefonSzam());
        email.setText(vevo.getVevoEmailCim());
        cimzett.setNev(vevo.getVezetekNev() + " " + vevo.getKeresztNev());
        cimzett.setCim(vevo.getVevoCim());
        cimzett.setEmail(vevo.getVevoEmailCim());
        cimzett.setCim(vevo.getVevoCim());

        termekLista.setModel(new DefaultComboBoxModel(db.getTermekek()));

        arajanlatRadioButton.setEnabled(true);
        megrendelesRadioButton.setEnabled(true);

        dokumentumCime = "Árajánlat";
    }//GEN-LAST:event_vasarloListaActionPerformed

    private void beszallitoListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beszallitoListaActionPerformed
        Beszállító kivalasztottBeszallito = (Beszállító) beszallitoLista.getSelectedItem();
        db.beszallitoTermekeiVektorfeltolt(kivalasztottBeszallito.getCegId());
        termekLista.setModel(new DefaultComboBoxModel(db.getBeszallitoTermekei()));
        nev.setText(kivalasztottBeszallito.getCegNev());
        cim.setText(kivalasztottBeszallito.getTelephely());
        telefonszam.setText(kivalasztottBeszallito.getCegTelefonSzam());
        email.setText(kivalasztottBeszallito.getCegEmailCim());

        cimzett.setCim(kivalasztottBeszallito.getTelephely());
        cimzett.setNev(kivalasztottBeszallito.getCegNev());
        cimzett.setEmail(kivalasztottBeszallito.getCegEmailCim());
        cimzett.setTelefonszam(kivalasztottBeszallito.getCegTelefonSzam());

        arajanlatRadioButton.setSelected(true);
        arajanlatRadioButton.setEnabled(false);
        megrendelesRadioButton.setEnabled(false);

        dokumentumCime = "Megrendelés";
    }//GEN-LAST:event_beszallitoListaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dokumentum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dokumentum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dokumentum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dokumentum.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dokumentum dialog = new Dokumentum(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton arajanlatRadioButton;
    private javax.swing.JComboBox beszallitoLista;
    private javax.swing.JLabel cim;
    private javax.swing.JLabel email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton keszGomb;
    private javax.swing.JRadioButton megrendelesRadioButton;
    private javax.swing.JLabel nev;
    private javax.swing.ButtonGroup radioButtonCsoport;
    private javax.swing.JTextField rendeltMennyiseg;
    private javax.swing.JTable table;
    private javax.swing.JLabel telefonszam;
    private javax.swing.JButton termekHozzaad;
    private javax.swing.JComboBox termekLista;
    private javax.swing.JButton vasarloAdatrogzitGomb;
    private javax.swing.JComboBox vasarloLista;
    private javax.swing.JButton vevoKivalaszt;
    // End of variables declaration//GEN-END:variables

    public static class ExampleTableModel extends DefaultTableModel {

        public ExampleTableModel(Vector<Termék> rendeltTermekek) {
            super(new Object[]{"cikkszám", "megnevezés", "rendelt mennyiség", "action"}, 0);

            for (int index = 0; index < rendeltTermekek.size(); index++) {
                Termék termek = rendeltTermekek.get(0);
                if (termek != null) {
                    termek = rendeltTermekek.get(index);
                    addRow(new Object[]{termek.getCikkszam(), termek.getMegnevezes(), termek.getRendeltMennyiseg(), index});

                }
            }
        }

        @Override               //csak a mennyiség és a gomb column legyen módosítható
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

    }

    public static class ButtonCellRenderer extends JButton implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (value != null) {
                setText("Törlés");
            } /* else {
             setText("Delete Me");
             }
             if (isSelected) {
             setForeground(table.getSelectionForeground());
             setBackground(table.getSelectionBackground());
             } else {
             setForeground(table.getForeground());
             setBackground(UIManager.getColor("Button.background"));
             }*/

            return this;
        }
    }

    public static class MennyisegCellEditor extends AbstractCellEditor implements TableCellEditor {

        private Object value;
        private JTextField editor;
        private int row;
        private JTable table;

        public MennyisegCellEditor(Vector<Termék> rendeltTermekek) {

            /*   editor.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {

                    
                    
                    

             }
             });*/
        }

        @Override
        public Object getCellEditorValue() {
            return value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.table = table;
            this.row = row;
            this.value = value;

            if (isSelected) {
                editor.setForeground(table.getSelectionForeground());
                editor.setBackground(table.getSelectionBackground());
            } else {
                editor.setForeground(table.getForeground());
                editor.setBackground(UIManager.getColor("Button.background"));
            }
            return editor;
        }

    }

    public static class ButtonCellEditor extends AbstractCellEditor implements TableCellEditor {

        private JButton editor;
        private Object value;
        private int row;
        private JTable table;

        public ButtonCellEditor(Vector<Termék> rendeltTermekek) {
            editor = new JButton();
            editor.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (table != null) {

                        for (int i = 0; i < rendeltTermekek.size(); i++) {
                            Termék termek = rendeltTermekek.get(i);
                            String cikkszam = (String) table.getValueAt(row, 0);
                            if (termek.getCikkszam().equals(cikkszam)) {
                                rendeltTermekek.remove(termek);
                            }
                        }
                        for (int i = 0; i < rendeltTermekek.size(); i++) {
                            System.out.println(rendeltTermekek.get(i));
                        }

                        fireEditingStopped();
                        TableModel model = table.getModel();
                        if (model instanceof DefaultTableModel) {
                            ((DefaultTableModel) model).removeRow(row);
                        }

                    }
                }
            });
        }

        @Override
        public boolean isCellEditable(EventObject e) {
            return true;
        }

        @Override
        public Object getCellEditorValue() {
            return value;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.table = table;
            this.row = row;
            this.value = value;
            if (value != null) {
                editor.setText("Törlés");
            } /*else {
             editor.setText("Delete Me");
             }
             if (isSelected) {
             editor.setForeground(table.getSelectionForeground());
             editor.setBackground(table.getSelectionBackground());
             } else {
             editor.setForeground(table.getForeground());
             editor.setBackground(UIManager.getColor("Button.background"));
             }*/

            return editor;
        }
    }
}
